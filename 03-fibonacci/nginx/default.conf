##
## Configuration for Nginx that will route incoming HTTP requests
## based on their endpoints
##   /api/...  --> routed to 'api' server
##   /         --> routed to 'client' server
##

# Tell Nginx that there is an 'upstream' server named 'client'
# that runs on host:port = 'client:5000'
# The host name 'client' is defined as a service inside
# the docker-compose.yml file
upstream client {
  server client:3000;
}

# Tell Nginx that there is an 'upstream' server named 'api'
# that runs on host:port = 'api:5000'
# The host name 'api' is defined as a service inside
# the docker-compose.yml file
upstream api {
  server api:5000;
}

# Set up port and route forwarding for Nginx
server {
  listen 80;

  # Any '/' requests will be routed to 'http://client' upstream
  location / {
    proxy_pass http://client;
  }

  # Any '/api/something' will be routed to 'http://api' upstream
  # while its '/api' part will be chopped out to make the
  # endpoint sent to the 'http:api' stream as just '/something'
  location /api {
    # Transform /api/anything_else to just /anything_else
    # by using rewrite rule with a regex expression
    # '$1' here refers to the regex '(.*)' that matches
    # any string after the '/api/' part.
    # 'break' means don't try to do any other 'rewrite'
    # after this 'rewrite' here.
    rewrite /api/(.*) /$1 break;
    proxy_pass http://api;
  }

  # Allow '/sockjs-node' requests to be routed to 'http://client' upstream.
  # This will allow the client React app to be hot reloaded whenever
  # something inside its source code changed - the change will be instantly
  # shown up on the browser.
  location /sockjs-node {
    proxy_pass http://client;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }
}
